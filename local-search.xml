<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>VueRouter路由守卫</title>
    <link href="/2021/06/06/VueRouter%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/"/>
    <url>/2021/06/06/VueRouter%E8%B7%AF%E7%94%B1%E5%AE%88%E5%8D%AB/</url>
    
    <content type="html"><![CDATA[<p>前言：最近学习一个商城项目的时候出现了一个请求，就是当我点击个人主页的时候，如果已经登陆并且没有超时的情况下会跳转到个人中心，但是如果没有登陆，或者登录超时了，那么就会跳转到登录界面，需要完成这个需求我们就必须使用路由守卫。</p><h1 id="1-路由守卫是什么？"><a href="#1-路由守卫是什么？" class="headerlink" title="1.路由守卫是什么？"></a>1.路由守卫是什么？</h1><p>路由守卫简单的来说就是路由在跳转的时候所触发的一些钩子函数</p><h1 id="2-导航守卫的分类"><a href="#2-导航守卫的分类" class="headerlink" title="2.导航守卫的分类"></a>2.导航守卫的分类</h1><p>1）全局前置守卫——发生在路由跳转前</p><p>当一个导航触发时，全局前置守卫按照创建顺序调用。守卫是异步解析执行，此时导航在所有守卫 resolve 完之前一直处于<strong>等待中</strong>。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const router = <span class="hljs-keyword">new</span> <span class="hljs-constructor">VueRouter(&#123; <span class="hljs-operator">...</span> &#125;)</span><br>router.before<span class="hljs-constructor">Each((<span class="hljs-params">to</span>, <span class="hljs-params">from</span>, <span class="hljs-params">next</span>)</span> =&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>2）全局解析守卫——发生在路由跳转前</p><p>可以用 router.beforeResolve 注册一个全局守卫。这和 router.beforeEach 类似，区别是在导航被确认之前，<strong>同时在所有组件内守卫</strong>和<strong>异步路由组件被解析之后</strong>，解析守卫就被调用。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">const router = <span class="hljs-keyword">new</span> <span class="hljs-constructor">VueRouter(&#123; <span class="hljs-operator">...</span> &#125;)</span>\<br>router.before<span class="hljs-constructor">Resolve((<span class="hljs-params">to</span>, <span class="hljs-params">from</span>, <span class="hljs-params">next</span>)</span> =&gt; &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>3）全局后置钩子——发生在路由跳转后，组件路由跳转前</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">router.afterEach(<span class="hljs-function"><span class="hljs-params">(to, <span class="hljs-keyword">from</span>)</span> =&gt;</span> &#123;<br>  <span class="hljs-regexp">//</span> ...<br>&#125;)<br></code></pre></td></tr></table></figure><p>4）路由独享守卫</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/foo&#x27;</span>,<br>      <span class="hljs-attr">component</span>: Foo,<br>      <span class="hljs-attr">beforeEnter</span>: <span class="hljs-function">(<span class="hljs-params">to, <span class="hljs-keyword">from</span>, next</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// ...</span><br>      &#125;<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><p>5）组件内守卫<br>可以在路由组件内直接定义以下路由导航守卫：<br><strong>beforeRouteEnter</strong><br><strong>beforeRouteUpdate (2.2 新增)</strong><br><strong>beforeRouteLeave</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk">const Foo = &#123;<br>  template: `...`,<br>  beforeRouteEnter(to, from, <span class="hljs-keyword">next</span>) &#123;<br>    <span class="hljs-regexp">//</span> 在渲染该组件的对应路由被 confirm 前调用<br>    <span class="hljs-regexp">//</span> 不！能！获取组件实例 `this`<br>    <span class="hljs-regexp">//</span> 因为当守卫执行前，组件实例还没被创建<br>  &#125;,<br>  beforeRouteUpdate(to, from, <span class="hljs-keyword">next</span>) &#123;<br>    <span class="hljs-regexp">//</span> 在当前路由改变，但是该组件被复用时调用<br>    <span class="hljs-regexp">//</span> 举例来说，对于一个带有动态参数的路径 <span class="hljs-regexp">/foo/</span>:id，在 <span class="hljs-regexp">/foo/</span><span class="hljs-number">1</span> 和 <span class="hljs-regexp">/foo/</span><span class="hljs-number">2</span> 之间跳转的时候，<br>    <span class="hljs-regexp">//</span> 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。<br>    <span class="hljs-regexp">//</span> 可以访问组件实例 `this`<br>  &#125;,<br>  beforeRouteLeave(to, from, <span class="hljs-keyword">next</span>) &#123;<br>    <span class="hljs-regexp">//</span> 导航离开该组件的对应路由时调用<br>    <span class="hljs-regexp">//</span> 可以访问组件实例 `this`<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-守卫的回调参数"><a href="#3-守卫的回调参数" class="headerlink" title="3.守卫的回调参数"></a>3.守卫的回调参数</h1><p><strong>to：目标路由对象；</strong><br><strong>from：即将要离开的路由对象；</strong><br><strong>next：他是最重要的一个参数，他相当于佛珠的线，把一个一个珠子逐个串起来。</strong></p><p><img src="/images/pasted-1.png" alt="upload successful"></p><h1 id="4-完整的导航解析"><a href="#4-完整的导航解析" class="headerlink" title="4.完整的导航解析"></a>4.完整的导航解析</h1><p>1.导航被触发。<br>2.在失活的组件里调用 beforeRouteLeave 守卫。<br>3.调用全局的 beforeEach 守卫。<br>4.在重用的组件里调用 beforeRouteUpdate 守卫 (2.2+)。<br>5.在路由配置里调用 beforeEnter。<br>6.解析异步路由组件。<br>7.在被激活的组件里调用 beforeRouteEnter。<br>8.调用全局的 beforeResolve 守卫 (2.5+)。<br>9.导航被确认。<br>10.调用全局的 afterEach 钩子。<br>11.触发 DOM 更新。<br>12.调用 beforeRouteEnter 守卫中传给 next 的回调函数，创建好的组件实例会作为回调函数的参数传入。</p>]]></content>
    
    
    <categories>
      
      <category>Vue</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于React事件处理函数中this的指向问题</title>
    <link href="/2021/06/05/%E5%85%B3%E4%BA%8EReact%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/"/>
    <url>/2021/06/05/%E5%85%B3%E4%BA%8EReact%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86%E5%87%BD%E6%95%B0%E4%B8%ADthis%E7%9A%84%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题出现："><a href="#问题出现：" class="headerlink" title="问题出现："></a>问题出现：</h1><p>我们在给比如按钮绑定点击事件函数的时候，我们在事件函数中使用this的时候会报错，这是由于this.xxx是undefined。</p><p>通过阅读了几篇博客之后我明白这并不是React这个框架的原因，这是JS的一个机制问题。</p><h1 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h1><p>我们之前所知道的是，JS中对象调用方法的时候，方法中的this指向的是调用对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">tmp</span>:<span class="hljs-string">&#x27;Yes!&#x27;</span>,<br>    <span class="hljs-attr">testLog</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.tmp);<br>    &#125;<br>&#125;; <br>obj.testLog();<br></code></pre></td></tr></table></figure><p>但是呢，如果我们使用一个指针指向该方法的内存区域，再通过这个指针调用这片内存的函数，就会发现this是windows</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br>    <span class="hljs-attr">tmp</span>:<span class="hljs-string">&#x27;Yes!&#x27;</span>,<br>    <span class="hljs-attr">testLog</span>:<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">this</span>.tmp);<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">let</span> tmpLog = obj.testLog;<br>tmpLog();<br></code></pre></td></tr></table></figure><p>所以this.xxx就是windows.xxx是没有定义的。<br>而我们传递的事件函数就是一个函数，而onClick是一个中间变量这样就会导致this的指向丢失。</p><h1 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h1><p><strong>（1）构造函数绑定this（推荐）</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-title">constructor</span>(<span class="hljs-params">props</span>)</span> &#123;<br>    <span class="hljs-built_in">super</span>(props);<br>    <span class="hljs-built_in">this</span>.handleClick = <span class="hljs-built_in">this</span>.handleClick.bind(<span class="hljs-built_in">this</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is:&#x27;</span>, <span class="hljs-built_in">this</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick&#125;</span>&gt;</span></span><br><span class="xml">        Click me</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125; <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（2）调用的时候绑定this</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Button</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">React</span>.<span class="hljs-title">Component</span> </span>&#123;<br>  <span class="hljs-function"><span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">&#x27;this is:&#x27;</span>, <span class="hljs-built_in">this</span>);<br>  &#125;<br>  <span class="hljs-function"><span class="hljs-title">render</span>(<span class="hljs-params"></span>)</span> &#123;<br>    <span class="hljs-keyword">return</span> (<br>      <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onClick</span>=<span class="hljs-string">&#123;this.handleClick.bind(this)&#125;</span>&gt;</span></span><br><span class="xml">        Click me</span><br><span class="xml">      <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span></span><br>    );<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3）箭头函数：箭头函数中的this只会固定的指向声明时的this指向。</strong></p>]]></content>
    
    
    <categories>
      
      <category>React</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
